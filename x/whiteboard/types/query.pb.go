// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dchain/whiteboard/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetWhiteboardPixelRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetWhiteboardPixelRequest) Reset()         { *m = QueryGetWhiteboardPixelRequest{} }
func (m *QueryGetWhiteboardPixelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardPixelRequest) ProtoMessage()    {}
func (*QueryGetWhiteboardPixelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{2}
}
func (m *QueryGetWhiteboardPixelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardPixelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardPixelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardPixelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardPixelRequest.Merge(m, src)
}
func (m *QueryGetWhiteboardPixelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardPixelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardPixelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardPixelRequest proto.InternalMessageInfo

func (m *QueryGetWhiteboardPixelRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetWhiteboardPixelResponse struct {
	WhiteboardPixel WhiteboardPixel `protobuf:"bytes,1,opt,name=WhiteboardPixel,proto3" json:"WhiteboardPixel"`
}

func (m *QueryGetWhiteboardPixelResponse) Reset()         { *m = QueryGetWhiteboardPixelResponse{} }
func (m *QueryGetWhiteboardPixelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardPixelResponse) ProtoMessage()    {}
func (*QueryGetWhiteboardPixelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{3}
}
func (m *QueryGetWhiteboardPixelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardPixelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardPixelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardPixelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardPixelResponse.Merge(m, src)
}
func (m *QueryGetWhiteboardPixelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardPixelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardPixelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardPixelResponse proto.InternalMessageInfo

func (m *QueryGetWhiteboardPixelResponse) GetWhiteboardPixel() WhiteboardPixel {
	if m != nil {
		return m.WhiteboardPixel
	}
	return WhiteboardPixel{}
}

type QueryAllWhiteboardPixelRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhiteboardPixelRequest) Reset()         { *m = QueryAllWhiteboardPixelRequest{} }
func (m *QueryAllWhiteboardPixelRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhiteboardPixelRequest) ProtoMessage()    {}
func (*QueryAllWhiteboardPixelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{4}
}
func (m *QueryAllWhiteboardPixelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhiteboardPixelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhiteboardPixelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhiteboardPixelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhiteboardPixelRequest.Merge(m, src)
}
func (m *QueryAllWhiteboardPixelRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhiteboardPixelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhiteboardPixelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhiteboardPixelRequest proto.InternalMessageInfo

func (m *QueryAllWhiteboardPixelRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllWhiteboardPixelResponse struct {
	WhiteboardPixel []WhiteboardPixel   `protobuf:"bytes,1,rep,name=WhiteboardPixel,proto3" json:"WhiteboardPixel"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhiteboardPixelResponse) Reset()         { *m = QueryAllWhiteboardPixelResponse{} }
func (m *QueryAllWhiteboardPixelResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhiteboardPixelResponse) ProtoMessage()    {}
func (*QueryAllWhiteboardPixelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{5}
}
func (m *QueryAllWhiteboardPixelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhiteboardPixelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhiteboardPixelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhiteboardPixelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhiteboardPixelResponse.Merge(m, src)
}
func (m *QueryAllWhiteboardPixelResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhiteboardPixelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhiteboardPixelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhiteboardPixelResponse proto.InternalMessageInfo

func (m *QueryAllWhiteboardPixelResponse) GetWhiteboardPixel() []WhiteboardPixel {
	if m != nil {
		return m.WhiteboardPixel
	}
	return nil
}

func (m *QueryAllWhiteboardPixelResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWhiteboardRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetWhiteboardRequest) Reset()         { *m = QueryGetWhiteboardRequest{} }
func (m *QueryGetWhiteboardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardRequest) ProtoMessage()    {}
func (*QueryGetWhiteboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{6}
}
func (m *QueryGetWhiteboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardRequest.Merge(m, src)
}
func (m *QueryGetWhiteboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardRequest proto.InternalMessageInfo

func (m *QueryGetWhiteboardRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetWhiteboardResponse struct {
	Whiteboard Whiteboard `protobuf:"bytes,1,opt,name=Whiteboard,proto3" json:"Whiteboard"`
}

func (m *QueryGetWhiteboardResponse) Reset()         { *m = QueryGetWhiteboardResponse{} }
func (m *QueryGetWhiteboardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardResponse) ProtoMessage()    {}
func (*QueryGetWhiteboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{7}
}
func (m *QueryGetWhiteboardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardResponse.Merge(m, src)
}
func (m *QueryGetWhiteboardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardResponse proto.InternalMessageInfo

func (m *QueryGetWhiteboardResponse) GetWhiteboard() Whiteboard {
	if m != nil {
		return m.Whiteboard
	}
	return Whiteboard{}
}

type QueryAllWhiteboardRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhiteboardRequest) Reset()         { *m = QueryAllWhiteboardRequest{} }
func (m *QueryAllWhiteboardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhiteboardRequest) ProtoMessage()    {}
func (*QueryAllWhiteboardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{8}
}
func (m *QueryAllWhiteboardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhiteboardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhiteboardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhiteboardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhiteboardRequest.Merge(m, src)
}
func (m *QueryAllWhiteboardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhiteboardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhiteboardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhiteboardRequest proto.InternalMessageInfo

func (m *QueryAllWhiteboardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllWhiteboardResponse struct {
	Whiteboard []Whiteboard        `protobuf:"bytes,1,rep,name=Whiteboard,proto3" json:"Whiteboard"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhiteboardResponse) Reset()         { *m = QueryAllWhiteboardResponse{} }
func (m *QueryAllWhiteboardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhiteboardResponse) ProtoMessage()    {}
func (*QueryAllWhiteboardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{9}
}
func (m *QueryAllWhiteboardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhiteboardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhiteboardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhiteboardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhiteboardResponse.Merge(m, src)
}
func (m *QueryAllWhiteboardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhiteboardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhiteboardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhiteboardResponse proto.InternalMessageInfo

func (m *QueryAllWhiteboardResponse) GetWhiteboard() []Whiteboard {
	if m != nil {
		return m.Whiteboard
	}
	return nil
}

func (m *QueryAllWhiteboardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWhiteboardPixelMapRequest struct {
	WhiteboardId uint64 `protobuf:"varint,1,opt,name=whiteboardId,proto3" json:"whiteboardId,omitempty"`
	Index        uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetWhiteboardPixelMapRequest) Reset()         { *m = QueryGetWhiteboardPixelMapRequest{} }
func (m *QueryGetWhiteboardPixelMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardPixelMapRequest) ProtoMessage()    {}
func (*QueryGetWhiteboardPixelMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{10}
}
func (m *QueryGetWhiteboardPixelMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardPixelMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardPixelMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardPixelMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardPixelMapRequest.Merge(m, src)
}
func (m *QueryGetWhiteboardPixelMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardPixelMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardPixelMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardPixelMapRequest proto.InternalMessageInfo

func (m *QueryGetWhiteboardPixelMapRequest) GetWhiteboardId() uint64 {
	if m != nil {
		return m.WhiteboardId
	}
	return 0
}

func (m *QueryGetWhiteboardPixelMapRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryGetWhiteboardPixelMapResponse struct {
	WhiteboardPixelMap WhiteboardPixelMap `protobuf:"bytes,1,opt,name=whiteboardPixelMap,proto3" json:"whiteboardPixelMap"`
}

func (m *QueryGetWhiteboardPixelMapResponse) Reset()         { *m = QueryGetWhiteboardPixelMapResponse{} }
func (m *QueryGetWhiteboardPixelMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardPixelMapResponse) ProtoMessage()    {}
func (*QueryGetWhiteboardPixelMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{11}
}
func (m *QueryGetWhiteboardPixelMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardPixelMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardPixelMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardPixelMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardPixelMapResponse.Merge(m, src)
}
func (m *QueryGetWhiteboardPixelMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardPixelMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardPixelMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardPixelMapResponse proto.InternalMessageInfo

func (m *QueryGetWhiteboardPixelMapResponse) GetWhiteboardPixelMap() WhiteboardPixelMap {
	if m != nil {
		return m.WhiteboardPixelMap
	}
	return WhiteboardPixelMap{}
}

type QueryAllWhiteboardPixelMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhiteboardPixelMapRequest) Reset()         { *m = QueryAllWhiteboardPixelMapRequest{} }
func (m *QueryAllWhiteboardPixelMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhiteboardPixelMapRequest) ProtoMessage()    {}
func (*QueryAllWhiteboardPixelMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{12}
}
func (m *QueryAllWhiteboardPixelMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhiteboardPixelMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhiteboardPixelMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhiteboardPixelMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhiteboardPixelMapRequest.Merge(m, src)
}
func (m *QueryAllWhiteboardPixelMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhiteboardPixelMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhiteboardPixelMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhiteboardPixelMapRequest proto.InternalMessageInfo

func (m *QueryAllWhiteboardPixelMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllWhiteboardPixelMapResponse struct {
	WhiteboardPixelMap []WhiteboardPixelMap `protobuf:"bytes,1,rep,name=whiteboardPixelMap,proto3" json:"whiteboardPixelMap"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllWhiteboardPixelMapResponse) Reset()         { *m = QueryAllWhiteboardPixelMapResponse{} }
func (m *QueryAllWhiteboardPixelMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllWhiteboardPixelMapResponse) ProtoMessage()    {}
func (*QueryAllWhiteboardPixelMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{13}
}
func (m *QueryAllWhiteboardPixelMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllWhiteboardPixelMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllWhiteboardPixelMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllWhiteboardPixelMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllWhiteboardPixelMapResponse.Merge(m, src)
}
func (m *QueryAllWhiteboardPixelMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllWhiteboardPixelMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllWhiteboardPixelMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllWhiteboardPixelMapResponse proto.InternalMessageInfo

func (m *QueryAllWhiteboardPixelMapResponse) GetWhiteboardPixelMap() []WhiteboardPixelMap {
	if m != nil {
		return m.WhiteboardPixelMap
	}
	return nil
}

func (m *QueryAllWhiteboardPixelMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWhiteboardPixelStatesRequest struct {
	WhiteboardId uint64             `protobuf:"varint,1,opt,name=whiteboardId,proto3" json:"whiteboardId,omitempty"`
	Pagination   *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetWhiteboardPixelStatesRequest) Reset()         { *m = QueryGetWhiteboardPixelStatesRequest{} }
func (m *QueryGetWhiteboardPixelStatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardPixelStatesRequest) ProtoMessage()    {}
func (*QueryGetWhiteboardPixelStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{14}
}
func (m *QueryGetWhiteboardPixelStatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardPixelStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardPixelStatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardPixelStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardPixelStatesRequest.Merge(m, src)
}
func (m *QueryGetWhiteboardPixelStatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardPixelStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardPixelStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardPixelStatesRequest proto.InternalMessageInfo

func (m *QueryGetWhiteboardPixelStatesRequest) GetWhiteboardId() uint64 {
	if m != nil {
		return m.WhiteboardId
	}
	return 0
}

func (m *QueryGetWhiteboardPixelStatesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetWhiteboardPixelStatesResponse struct {
	Pixels     []*WhiteboardPixel  `protobuf:"bytes,1,rep,name=pixels,proto3" json:"pixels,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetWhiteboardPixelStatesResponse) Reset()         { *m = QueryGetWhiteboardPixelStatesResponse{} }
func (m *QueryGetWhiteboardPixelStatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetWhiteboardPixelStatesResponse) ProtoMessage()    {}
func (*QueryGetWhiteboardPixelStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84126f68a210a9ae, []int{15}
}
func (m *QueryGetWhiteboardPixelStatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetWhiteboardPixelStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetWhiteboardPixelStatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetWhiteboardPixelStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetWhiteboardPixelStatesResponse.Merge(m, src)
}
func (m *QueryGetWhiteboardPixelStatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetWhiteboardPixelStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetWhiteboardPixelStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetWhiteboardPixelStatesResponse proto.InternalMessageInfo

func (m *QueryGetWhiteboardPixelStatesResponse) GetPixels() []*WhiteboardPixel {
	if m != nil {
		return m.Pixels
	}
	return nil
}

func (m *QueryGetWhiteboardPixelStatesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "dchain.whiteboard.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dchain.whiteboard.QueryParamsResponse")
	proto.RegisterType((*QueryGetWhiteboardPixelRequest)(nil), "dchain.whiteboard.QueryGetWhiteboardPixelRequest")
	proto.RegisterType((*QueryGetWhiteboardPixelResponse)(nil), "dchain.whiteboard.QueryGetWhiteboardPixelResponse")
	proto.RegisterType((*QueryAllWhiteboardPixelRequest)(nil), "dchain.whiteboard.QueryAllWhiteboardPixelRequest")
	proto.RegisterType((*QueryAllWhiteboardPixelResponse)(nil), "dchain.whiteboard.QueryAllWhiteboardPixelResponse")
	proto.RegisterType((*QueryGetWhiteboardRequest)(nil), "dchain.whiteboard.QueryGetWhiteboardRequest")
	proto.RegisterType((*QueryGetWhiteboardResponse)(nil), "dchain.whiteboard.QueryGetWhiteboardResponse")
	proto.RegisterType((*QueryAllWhiteboardRequest)(nil), "dchain.whiteboard.QueryAllWhiteboardRequest")
	proto.RegisterType((*QueryAllWhiteboardResponse)(nil), "dchain.whiteboard.QueryAllWhiteboardResponse")
	proto.RegisterType((*QueryGetWhiteboardPixelMapRequest)(nil), "dchain.whiteboard.QueryGetWhiteboardPixelMapRequest")
	proto.RegisterType((*QueryGetWhiteboardPixelMapResponse)(nil), "dchain.whiteboard.QueryGetWhiteboardPixelMapResponse")
	proto.RegisterType((*QueryAllWhiteboardPixelMapRequest)(nil), "dchain.whiteboard.QueryAllWhiteboardPixelMapRequest")
	proto.RegisterType((*QueryAllWhiteboardPixelMapResponse)(nil), "dchain.whiteboard.QueryAllWhiteboardPixelMapResponse")
	proto.RegisterType((*QueryGetWhiteboardPixelStatesRequest)(nil), "dchain.whiteboard.QueryGetWhiteboardPixelStatesRequest")
	proto.RegisterType((*QueryGetWhiteboardPixelStatesResponse)(nil), "dchain.whiteboard.QueryGetWhiteboardPixelStatesResponse")
}

func init() { proto.RegisterFile("dchain/whiteboard/query.proto", fileDescriptor_84126f68a210a9ae) }

var fileDescriptor_84126f68a210a9ae = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4b, 0x4f, 0x14, 0x4b,
	0x14, 0xc7, 0xa7, 0x06, 0x98, 0xc5, 0xb9, 0xaf, 0xdc, 0xba, 0xdc, 0x84, 0x99, 0x7b, 0x69, 0xa4,
	0x64, 0x00, 0x01, 0xbb, 0x78, 0x19, 0x8c, 0x89, 0x0f, 0x30, 0x42, 0x5c, 0x60, 0x70, 0x5c, 0x98,
	0x68, 0x0c, 0xa9, 0x61, 0x2a, 0x43, 0xc7, 0x61, 0xba, 0x99, 0x6e, 0x04, 0x24, 0x2c, 0xf4, 0x13,
	0x18, 0x89, 0xdf, 0xc1, 0x10, 0xb7, 0x6e, 0x5d, 0xa3, 0x2b, 0x12, 0x5d, 0xb8, 0x32, 0x06, 0xf8,
	0x20, 0x66, 0xaa, 0xcf, 0x38, 0x8f, 0x7e, 0x0e, 0xce, 0x6e, 0xe8, 0x3a, 0x8f, 0xdf, 0xff, 0x9c,
	0xd3, 0x75, 0x1a, 0xe8, 0x2f, 0xac, 0xad, 0x0b, 0xa3, 0xcc, 0xb7, 0xd7, 0x0d, 0x47, 0xe6, 0x4d,
	0x51, 0x29, 0xf0, 0xcd, 0x2d, 0x59, 0xd9, 0xd5, 0xad, 0x8a, 0xe9, 0x98, 0xf4, 0x6f, 0xf7, 0x58,
	0xaf, 0x1f, 0x67, 0x7a, 0x8b, 0x66, 0xd1, 0x54, 0xa7, 0xbc, 0xfa, 0xcb, 0x35, 0xcc, 0xfc, 0x5f,
	0x34, 0xcd, 0x62, 0x49, 0x72, 0x61, 0x19, 0x5c, 0x94, 0xcb, 0xa6, 0x23, 0x1c, 0xc3, 0x2c, 0xdb,
	0x78, 0x3a, 0xb6, 0x66, 0xda, 0x1b, 0xa6, 0xcd, 0xf3, 0xc2, 0x96, 0x6e, 0x7c, 0xfe, 0x6c, 0x2a,
	0x2f, 0x1d, 0x31, 0xc5, 0x2d, 0x51, 0x34, 0xca, 0xca, 0x18, 0x6d, 0x35, 0x2f, 0x91, 0x25, 0x2a,
	0x62, 0xa3, 0x16, 0x6b, 0xd4, 0x7b, 0x5e, 0xff, 0xb9, 0x6a, 0x19, 0x3b, 0xb2, 0x84, 0x96, 0x2c,
	0xcc, 0x12, 0x6d, 0x26, 0xa2, 0xa3, 0xad, 0x6e, 0x08, 0xcb, 0xb5, 0x66, 0xbd, 0x40, 0xef, 0x57,
	0xe9, 0x57, 0x14, 0x50, 0x4e, 0x6e, 0x6e, 0x49, 0xdb, 0x61, 0xf7, 0xe0, 0x9f, 0xa6, 0xa7, 0xb6,
	0x65, 0x96, 0x6d, 0x49, 0xe7, 0x20, 0xe5, 0x82, 0xf7, 0x91, 0x0b, 0x64, 0xf4, 0xb7, 0xe9, 0xb4,
	0xee, 0x29, 0xa6, 0xee, 0xba, 0x2c, 0x74, 0x1f, 0x7d, 0x1b, 0x48, 0xe4, 0xd0, 0x9c, 0x4d, 0x82,
	0xa6, 0xe2, 0x2d, 0x49, 0xe7, 0xe1, 0x4f, 0xd3, 0x95, 0x2a, 0x0a, 0x66, 0xa4, 0x7f, 0x42, 0xd2,
	0x28, 0xa8, 0xb0, 0xdd, 0xb9, 0xa4, 0x51, 0x60, 0x5b, 0x30, 0x10, 0xe8, 0x81, 0x34, 0x39, 0xf8,
	0xab, 0xe5, 0x08, 0xb1, 0x98, 0x0f, 0x56, 0x8b, 0x25, 0xf2, 0xb5, 0x06, 0x60, 0xeb, 0x08, 0x3a,
	0x5f, 0x2a, 0x05, 0x80, 0x2e, 0x02, 0xd4, 0x1b, 0x8c, 0x09, 0x87, 0x75, 0x77, 0x1a, 0xf4, 0xea,
	0x34, 0xe8, 0xee, 0xb4, 0xe1, 0x34, 0xe8, 0x2b, 0xa2, 0x28, 0xd1, 0x37, 0xd7, 0xe0, 0xc9, 0x3e,
	0x10, 0x54, 0xe8, 0x97, 0x2a, 0x4c, 0x61, 0xd7, 0x2f, 0x29, 0xa4, 0x4b, 0x4d, 0xfc, 0x49, 0xc5,
	0x3f, 0x12, 0xc9, 0xef, 0x02, 0x35, 0x09, 0x18, 0x87, 0xb4, 0xb7, 0x43, 0x41, 0xed, 0x14, 0x90,
	0xf1, 0x33, 0x46, 0x9d, 0xb7, 0x01, 0xea, 0x4f, 0xb1, 0xa6, 0xfd, 0xa1, 0x12, 0x51, 0x5d, 0x83,
	0x1b, 0x5b, 0x43, 0x9e, 0xa6, 0x7a, 0x76, 0xba, 0x6b, 0x87, 0x04, 0x85, 0xb4, 0x64, 0x09, 0x10,
	0xd2, 0x75, 0x0e, 0x21, 0x9d, 0xeb, 0xd0, 0x13, 0x18, 0x0c, 0x78, 0x87, 0x96, 0x85, 0x55, 0xab,
	0x0c, 0x83, 0xdf, 0xeb, 0x60, 0x77, 0x6b, 0x3d, 0x6b, 0x7a, 0x46, 0x7b, 0xa1, 0xc7, 0x28, 0x17,
	0xe4, 0x8e, 0x82, 0xe9, 0xce, 0xb9, 0x7f, 0xb0, 0x17, 0x04, 0x58, 0x58, 0x7c, 0xac, 0xc9, 0x63,
	0xa0, 0xdb, 0x9e, 0x53, 0x6c, 0x41, 0x36, 0x7a, 0x8e, 0x97, 0x85, 0x85, 0x35, 0xf2, 0x09, 0xc3,
	0x9e, 0xa2, 0x44, 0xef, 0x4b, 0xd4, 0x20, 0xb1, 0x53, 0xcd, 0xff, 0x54, 0x13, 0x1c, 0x90, 0x2d,
	0x42, 0x70, 0x57, 0x07, 0x04, 0x77, 0x6e, 0x38, 0x5e, 0x13, 0x18, 0x0a, 0xe8, 0xde, 0x03, 0x47,
	0x38, 0xd2, 0x6e, 0x67, 0x40, 0x16, 0x7d, 0xa8, 0xce, 0x53, 0xe1, 0x77, 0x04, 0xb2, 0x11, 0x50,
	0x58, 0xe4, 0x6b, 0x90, 0x52, 0xab, 0xcc, 0x8e, 0x7f, 0x23, 0xe6, 0xd0, 0xa3, 0x63, 0x35, 0x9c,
	0x3e, 0x03, 0xe8, 0x51, 0xb8, 0xf4, 0x39, 0xa4, 0xdc, 0xc5, 0x47, 0xfd, 0x3a, 0xec, 0xdd, 0xb0,
	0x99, 0xe1, 0x28, 0x33, 0x37, 0x1d, 0x1b, 0x7c, 0xf9, 0xf9, 0xec, 0x20, 0xf9, 0x1f, 0x4d, 0xf3,
	0xa0, 0x8f, 0x08, 0x7a, 0x48, 0x3c, 0x6b, 0x82, 0x4e, 0x05, 0x85, 0x0f, 0xdc, 0xc0, 0x99, 0xe9,
	0x76, 0x5c, 0x90, 0x6e, 0x52, 0xd1, 0x8d, 0xd1, 0x51, 0x1e, 0xfd, 0xd1, 0xc1, 0xf7, 0x8c, 0xc2,
	0x3e, 0x7d, 0x4b, 0x80, 0xb6, 0x44, 0x9b, 0x2f, 0x85, 0xf0, 0x06, 0x2e, 0xe2, 0x60, 0xde, 0xe0,
	0x85, 0xca, 0xc6, 0x15, 0x6f, 0x96, 0x5e, 0x8c, 0xc1, 0x4b, 0xdf, 0x90, 0xc6, 0xdb, 0x9c, 0x4e,
	0xc4, 0xaa, 0x4f, 0x8d, 0xee, 0x72, 0x4c, 0x6b, 0x04, 0x1b, 0x53, 0x60, 0x43, 0x94, 0x85, 0x82,
	0xb9, 0x25, 0x3c, 0x20, 0xf0, 0x47, 0x3d, 0x44, 0xb5, 0x7a, 0x13, 0xb1, 0x4a, 0x11, 0x89, 0xe6,
	0xbb, 0xd3, 0x58, 0x56, 0xa1, 0x0d, 0xd0, 0xfe, 0x50, 0x34, 0xfa, 0xd1, 0xdb, 0xd8, 0xea, 0x7d,
	0x35, 0x1b, 0x7f, 0xaa, 0xea, 0x37, 0x76, 0xe6, 0x4a, 0x9b, 0x5e, 0x88, 0xba, 0xa8, 0x50, 0x6f,
	0xd1, 0x1b, 0x3c, 0xde, 0x37, 0x30, 0xdf, 0x6b, 0xbc, 0xc5, 0xf6, 0xf9, 0x9e, 0x5a, 0x6c, 0xfb,
	0xf4, 0x3d, 0x81, 0x7f, 0xbd, 0x69, 0xaa, 0x95, 0x9e, 0x8d, 0x3f, 0x74, 0x71, 0xe4, 0x84, 0x2e,
	0x12, 0xc6, 0x95, 0x9c, 0x4b, 0x74, 0x24, 0xa6, 0x1c, 0xfa, 0x85, 0x40, 0x5f, 0xd0, 0xcd, 0x49,
	0xe7, 0xe2, 0xd7, 0xb4, 0x69, 0x01, 0x64, 0xae, 0xb6, 0xef, 0x88, 0x02, 0xee, 0x28, 0x01, 0x37,
	0xe9, 0x75, 0x1f, 0x01, 0x45, 0xe9, 0xac, 0x7a, 0x44, 0xd8, 0xca, 0xbf, 0xa5, 0x2d, 0x0b, 0x33,
	0x47, 0x27, 0x1a, 0x39, 0x3e, 0xd1, 0xc8, 0xf7, 0x13, 0x8d, 0xbc, 0x3a, 0xd5, 0x12, 0xc7, 0xa7,
	0x5a, 0xe2, 0xeb, 0xa9, 0x96, 0x78, 0x94, 0xc6, 0xb8, 0x3b, 0x8d, 0x91, 0x9d, 0x5d, 0x4b, 0xda,
	0xf9, 0x94, 0xfa, 0xff, 0x66, 0xe6, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x21, 0x78, 0x63,
	0x0f, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a WhiteboardPixel by id.
	WhiteboardPixel(ctx context.Context, in *QueryGetWhiteboardPixelRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardPixelResponse, error)
	// Queries a list of WhiteboardPixel items.
	WhiteboardPixelAll(ctx context.Context, in *QueryAllWhiteboardPixelRequest, opts ...grpc.CallOption) (*QueryAllWhiteboardPixelResponse, error)
	// Queries a Whiteboard by id.
	Whiteboard(ctx context.Context, in *QueryGetWhiteboardRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardResponse, error)
	// Queries a list of Whiteboard items.
	WhiteboardAll(ctx context.Context, in *QueryAllWhiteboardRequest, opts ...grpc.CallOption) (*QueryAllWhiteboardResponse, error)
	// Queries a WhiteboardPixelMap by index.
	WhiteboardPixelMap(ctx context.Context, in *QueryGetWhiteboardPixelMapRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardPixelMapResponse, error)
	// Queries a list of WhiteboardPixelMap items.
	WhiteboardPixelMapAll(ctx context.Context, in *QueryAllWhiteboardPixelMapRequest, opts ...grpc.CallOption) (*QueryAllWhiteboardPixelMapResponse, error)
	// Queries a list of GetWhiteboardPixelStates items.
	GetWhiteboardPixelStates(ctx context.Context, in *QueryGetWhiteboardPixelStatesRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardPixelStatesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhiteboardPixel(ctx context.Context, in *QueryGetWhiteboardPixelRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardPixelResponse, error) {
	out := new(QueryGetWhiteboardPixelResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/WhiteboardPixel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhiteboardPixelAll(ctx context.Context, in *QueryAllWhiteboardPixelRequest, opts ...grpc.CallOption) (*QueryAllWhiteboardPixelResponse, error) {
	out := new(QueryAllWhiteboardPixelResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/WhiteboardPixelAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Whiteboard(ctx context.Context, in *QueryGetWhiteboardRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardResponse, error) {
	out := new(QueryGetWhiteboardResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/Whiteboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhiteboardAll(ctx context.Context, in *QueryAllWhiteboardRequest, opts ...grpc.CallOption) (*QueryAllWhiteboardResponse, error) {
	out := new(QueryAllWhiteboardResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/WhiteboardAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhiteboardPixelMap(ctx context.Context, in *QueryGetWhiteboardPixelMapRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardPixelMapResponse, error) {
	out := new(QueryGetWhiteboardPixelMapResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/WhiteboardPixelMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhiteboardPixelMapAll(ctx context.Context, in *QueryAllWhiteboardPixelMapRequest, opts ...grpc.CallOption) (*QueryAllWhiteboardPixelMapResponse, error) {
	out := new(QueryAllWhiteboardPixelMapResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/WhiteboardPixelMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetWhiteboardPixelStates(ctx context.Context, in *QueryGetWhiteboardPixelStatesRequest, opts ...grpc.CallOption) (*QueryGetWhiteboardPixelStatesResponse, error) {
	out := new(QueryGetWhiteboardPixelStatesResponse)
	err := c.cc.Invoke(ctx, "/dchain.whiteboard.Query/GetWhiteboardPixelStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a WhiteboardPixel by id.
	WhiteboardPixel(context.Context, *QueryGetWhiteboardPixelRequest) (*QueryGetWhiteboardPixelResponse, error)
	// Queries a list of WhiteboardPixel items.
	WhiteboardPixelAll(context.Context, *QueryAllWhiteboardPixelRequest) (*QueryAllWhiteboardPixelResponse, error)
	// Queries a Whiteboard by id.
	Whiteboard(context.Context, *QueryGetWhiteboardRequest) (*QueryGetWhiteboardResponse, error)
	// Queries a list of Whiteboard items.
	WhiteboardAll(context.Context, *QueryAllWhiteboardRequest) (*QueryAllWhiteboardResponse, error)
	// Queries a WhiteboardPixelMap by index.
	WhiteboardPixelMap(context.Context, *QueryGetWhiteboardPixelMapRequest) (*QueryGetWhiteboardPixelMapResponse, error)
	// Queries a list of WhiteboardPixelMap items.
	WhiteboardPixelMapAll(context.Context, *QueryAllWhiteboardPixelMapRequest) (*QueryAllWhiteboardPixelMapResponse, error)
	// Queries a list of GetWhiteboardPixelStates items.
	GetWhiteboardPixelStates(context.Context, *QueryGetWhiteboardPixelStatesRequest) (*QueryGetWhiteboardPixelStatesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) WhiteboardPixel(ctx context.Context, req *QueryGetWhiteboardPixelRequest) (*QueryGetWhiteboardPixelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteboardPixel not implemented")
}
func (*UnimplementedQueryServer) WhiteboardPixelAll(ctx context.Context, req *QueryAllWhiteboardPixelRequest) (*QueryAllWhiteboardPixelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteboardPixelAll not implemented")
}
func (*UnimplementedQueryServer) Whiteboard(ctx context.Context, req *QueryGetWhiteboardRequest) (*QueryGetWhiteboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whiteboard not implemented")
}
func (*UnimplementedQueryServer) WhiteboardAll(ctx context.Context, req *QueryAllWhiteboardRequest) (*QueryAllWhiteboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteboardAll not implemented")
}
func (*UnimplementedQueryServer) WhiteboardPixelMap(ctx context.Context, req *QueryGetWhiteboardPixelMapRequest) (*QueryGetWhiteboardPixelMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteboardPixelMap not implemented")
}
func (*UnimplementedQueryServer) WhiteboardPixelMapAll(ctx context.Context, req *QueryAllWhiteboardPixelMapRequest) (*QueryAllWhiteboardPixelMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteboardPixelMapAll not implemented")
}
func (*UnimplementedQueryServer) GetWhiteboardPixelStates(ctx context.Context, req *QueryGetWhiteboardPixelStatesRequest) (*QueryGetWhiteboardPixelStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhiteboardPixelStates not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhiteboardPixel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWhiteboardPixelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhiteboardPixel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/WhiteboardPixel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhiteboardPixel(ctx, req.(*QueryGetWhiteboardPixelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhiteboardPixelAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWhiteboardPixelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhiteboardPixelAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/WhiteboardPixelAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhiteboardPixelAll(ctx, req.(*QueryAllWhiteboardPixelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Whiteboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWhiteboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Whiteboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/Whiteboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Whiteboard(ctx, req.(*QueryGetWhiteboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhiteboardAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWhiteboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhiteboardAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/WhiteboardAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhiteboardAll(ctx, req.(*QueryAllWhiteboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhiteboardPixelMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWhiteboardPixelMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhiteboardPixelMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/WhiteboardPixelMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhiteboardPixelMap(ctx, req.(*QueryGetWhiteboardPixelMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhiteboardPixelMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllWhiteboardPixelMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhiteboardPixelMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/WhiteboardPixelMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhiteboardPixelMapAll(ctx, req.(*QueryAllWhiteboardPixelMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetWhiteboardPixelStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetWhiteboardPixelStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetWhiteboardPixelStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dchain.whiteboard.Query/GetWhiteboardPixelStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetWhiteboardPixelStates(ctx, req.(*QueryGetWhiteboardPixelStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dchain.whiteboard.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "WhiteboardPixel",
			Handler:    _Query_WhiteboardPixel_Handler,
		},
		{
			MethodName: "WhiteboardPixelAll",
			Handler:    _Query_WhiteboardPixelAll_Handler,
		},
		{
			MethodName: "Whiteboard",
			Handler:    _Query_Whiteboard_Handler,
		},
		{
			MethodName: "WhiteboardAll",
			Handler:    _Query_WhiteboardAll_Handler,
		},
		{
			MethodName: "WhiteboardPixelMap",
			Handler:    _Query_WhiteboardPixelMap_Handler,
		},
		{
			MethodName: "WhiteboardPixelMapAll",
			Handler:    _Query_WhiteboardPixelMapAll_Handler,
		},
		{
			MethodName: "GetWhiteboardPixelStates",
			Handler:    _Query_GetWhiteboardPixelStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dchain/whiteboard/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardPixelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardPixelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardPixelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardPixelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardPixelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardPixelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WhiteboardPixel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllWhiteboardPixelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhiteboardPixelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhiteboardPixelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllWhiteboardPixelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhiteboardPixelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhiteboardPixelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WhiteboardPixel) > 0 {
		for iNdEx := len(m.WhiteboardPixel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhiteboardPixel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Whiteboard.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllWhiteboardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhiteboardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhiteboardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllWhiteboardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhiteboardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhiteboardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Whiteboard) > 0 {
		for iNdEx := len(m.Whiteboard) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Whiteboard[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardPixelMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardPixelMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardPixelMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.WhiteboardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WhiteboardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardPixelMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardPixelMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardPixelMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.WhiteboardPixelMap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllWhiteboardPixelMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhiteboardPixelMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhiteboardPixelMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllWhiteboardPixelMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllWhiteboardPixelMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllWhiteboardPixelMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.WhiteboardPixelMap) > 0 {
		for iNdEx := len(m.WhiteboardPixelMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhiteboardPixelMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardPixelStatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardPixelStatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardPixelStatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.WhiteboardId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WhiteboardId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetWhiteboardPixelStatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetWhiteboardPixelStatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetWhiteboardPixelStatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pixels) > 0 {
		for iNdEx := len(m.Pixels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pixels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetWhiteboardPixelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetWhiteboardPixelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WhiteboardPixel.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllWhiteboardPixelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllWhiteboardPixelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhiteboardPixel) > 0 {
		for _, e := range m.WhiteboardPixel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWhiteboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetWhiteboardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Whiteboard.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllWhiteboardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllWhiteboardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Whiteboard) > 0 {
		for _, e := range m.Whiteboard {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWhiteboardPixelMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WhiteboardId != 0 {
		n += 1 + sovQuery(uint64(m.WhiteboardId))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryGetWhiteboardPixelMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.WhiteboardPixelMap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllWhiteboardPixelMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllWhiteboardPixelMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WhiteboardPixelMap) > 0 {
		for _, e := range m.WhiteboardPixelMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWhiteboardPixelStatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WhiteboardId != 0 {
		n += 1 + sovQuery(uint64(m.WhiteboardId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetWhiteboardPixelStatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pixels) > 0 {
		for _, e := range m.Pixels {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardPixelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardPixelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardPixel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WhiteboardPixel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhiteboardPixelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhiteboardPixelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardPixel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteboardPixel = append(m.WhiteboardPixel, WhiteboardPixel{})
			if err := m.WhiteboardPixel[len(m.WhiteboardPixel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whiteboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Whiteboard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhiteboardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhiteboardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhiteboardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhiteboardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhiteboardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhiteboardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whiteboard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whiteboard = append(m.Whiteboard, Whiteboard{})
			if err := m.Whiteboard[len(m.Whiteboard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardPixelMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardId", wireType)
			}
			m.WhiteboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardPixelMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardPixelMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WhiteboardPixelMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhiteboardPixelMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllWhiteboardPixelMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllWhiteboardPixelMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardPixelMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteboardPixelMap = append(m.WhiteboardPixelMap, WhiteboardPixelMap{})
			if err := m.WhiteboardPixelMap[len(m.WhiteboardPixelMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardPixelStatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardId", wireType)
			}
			m.WhiteboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetWhiteboardPixelStatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetWhiteboardPixelStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pixels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pixels = append(m.Pixels, &WhiteboardPixel{})
			if err := m.Pixels[len(m.Pixels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
