// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dchain/whiteboard/whiteboard.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Whiteboard struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Owner       string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	XSize       uint64 `protobuf:"varint,5,opt,name=xSize,proto3" json:"xSize,omitempty"`
	YSize       uint64 `protobuf:"varint,6,opt,name=ySize,proto3" json:"ySize,omitempty"`
	IsLocked    bool   `protobuf:"varint,7,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
}

func (m *Whiteboard) Reset()         { *m = Whiteboard{} }
func (m *Whiteboard) String() string { return proto.CompactTextString(m) }
func (*Whiteboard) ProtoMessage()    {}
func (*Whiteboard) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5dcd1e1ea3296b5, []int{0}
}
func (m *Whiteboard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Whiteboard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Whiteboard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Whiteboard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Whiteboard.Merge(m, src)
}
func (m *Whiteboard) XXX_Size() int {
	return m.Size()
}
func (m *Whiteboard) XXX_DiscardUnknown() {
	xxx_messageInfo_Whiteboard.DiscardUnknown(m)
}

var xxx_messageInfo_Whiteboard proto.InternalMessageInfo

func (m *Whiteboard) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Whiteboard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Whiteboard) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Whiteboard) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Whiteboard) GetXSize() uint64 {
	if m != nil {
		return m.XSize
	}
	return 0
}

func (m *Whiteboard) GetYSize() uint64 {
	if m != nil {
		return m.YSize
	}
	return 0
}

func (m *Whiteboard) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func init() {
	proto.RegisterType((*Whiteboard)(nil), "dchain.whiteboard.Whiteboard")
}

func init() {
	proto.RegisterFile("dchain/whiteboard/whiteboard.proto", fileDescriptor_f5dcd1e1ea3296b5)
}

var fileDescriptor_f5dcd1e1ea3296b5 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0x49, 0xce, 0x48,
	0xcc, 0xcc, 0xd3, 0x2f, 0xcf, 0xc8, 0x2c, 0x49, 0x4d, 0xca, 0x4f, 0x2c, 0x4a, 0x41, 0x62, 0xea,
	0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x09, 0x42, 0xd4, 0xe8, 0x21, 0x24, 0x94, 0x36, 0x30, 0x72,
	0x71, 0x85, 0xc3, 0xb9, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c,
	0x41, 0x4c, 0x99, 0x29, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x90, 0x02, 0x17, 0x77, 0x4a, 0x6a, 0x71, 0x72, 0x51, 0x66, 0x41,
	0x49, 0x66, 0x7e, 0x9e, 0x04, 0x33, 0x58, 0x0a, 0x59, 0x48, 0x48, 0x84, 0x8b, 0x35, 0xbf, 0x3c,
	0x2f, 0xb5, 0x48, 0x82, 0x05, 0x2c, 0x07, 0xe1, 0x80, 0x44, 0x2b, 0x82, 0x33, 0xab, 0x52, 0x25,
	0x58, 0xc1, 0xc6, 0x43, 0x38, 0x20, 0xd1, 0x4a, 0xb0, 0x28, 0x1b, 0x44, 0x14, 0xcc, 0x11, 0x92,
	0xe2, 0xe2, 0xc8, 0x2c, 0xf6, 0xc9, 0x4f, 0xce, 0x4e, 0x4d, 0x91, 0x60, 0x57, 0x60, 0xd4, 0xe0,
	0x08, 0x82, 0xf3, 0x9d, 0x8c, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a,
	0x12, 0x1a, 0x06, 0x15, 0xc8, 0xa1, 0x50, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x01,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0x41, 0x26, 0x7e, 0x27, 0x01, 0x00, 0x00,
}

func (m *Whiteboard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Whiteboard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Whiteboard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.YSize != 0 {
		i = encodeVarintWhiteboard(dAtA, i, uint64(m.YSize))
		i--
		dAtA[i] = 0x30
	}
	if m.XSize != 0 {
		i = encodeVarintWhiteboard(dAtA, i, uint64(m.XSize))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintWhiteboard(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintWhiteboard(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWhiteboard(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWhiteboard(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhiteboard(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhiteboard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Whiteboard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWhiteboard(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWhiteboard(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovWhiteboard(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovWhiteboard(uint64(l))
	}
	if m.XSize != 0 {
		n += 1 + sovWhiteboard(uint64(m.XSize))
	}
	if m.YSize != 0 {
		n += 1 + sovWhiteboard(uint64(m.YSize))
	}
	if m.IsLocked {
		n += 2
	}
	return n
}

func sovWhiteboard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhiteboard(x uint64) (n int) {
	return sovWhiteboard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Whiteboard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhiteboard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Whiteboard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Whiteboard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhiteboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhiteboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhiteboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhiteboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhiteboard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhiteboard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XSize", wireType)
			}
			m.XSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YSize", wireType)
			}
			m.YSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWhiteboard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhiteboard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhiteboard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhiteboard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhiteboard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhiteboard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhiteboard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhiteboard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhiteboard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhiteboard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhiteboard = fmt.Errorf("proto: unexpected end of group")
)
