// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dchain/whiteboard/whiteboard_pixel.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type WhiteboardPixel struct {
	Id           uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WhiteboardId uint64 `protobuf:"varint,2,opt,name=whiteboardId,proto3" json:"whiteboardId,omitempty"`
	Index        uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	LastModifier string `protobuf:"bytes,4,opt,name=lastModifier,proto3" json:"lastModifier,omitempty"`
	R            uint64 `protobuf:"varint,5,opt,name=r,proto3" json:"r,omitempty"`
	G            uint64 `protobuf:"varint,6,opt,name=g,proto3" json:"g,omitempty"`
	B            uint64 `protobuf:"varint,7,opt,name=b,proto3" json:"b,omitempty"`
}

func (m *WhiteboardPixel) Reset()         { *m = WhiteboardPixel{} }
func (m *WhiteboardPixel) String() string { return proto.CompactTextString(m) }
func (*WhiteboardPixel) ProtoMessage()    {}
func (*WhiteboardPixel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7613600cfede3dc2, []int{0}
}
func (m *WhiteboardPixel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhiteboardPixel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhiteboardPixel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhiteboardPixel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhiteboardPixel.Merge(m, src)
}
func (m *WhiteboardPixel) XXX_Size() int {
	return m.Size()
}
func (m *WhiteboardPixel) XXX_DiscardUnknown() {
	xxx_messageInfo_WhiteboardPixel.DiscardUnknown(m)
}

var xxx_messageInfo_WhiteboardPixel proto.InternalMessageInfo

func (m *WhiteboardPixel) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WhiteboardPixel) GetWhiteboardId() uint64 {
	if m != nil {
		return m.WhiteboardId
	}
	return 0
}

func (m *WhiteboardPixel) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WhiteboardPixel) GetLastModifier() string {
	if m != nil {
		return m.LastModifier
	}
	return ""
}

func (m *WhiteboardPixel) GetR() uint64 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *WhiteboardPixel) GetG() uint64 {
	if m != nil {
		return m.G
	}
	return 0
}

func (m *WhiteboardPixel) GetB() uint64 {
	if m != nil {
		return m.B
	}
	return 0
}

func init() {
	proto.RegisterType((*WhiteboardPixel)(nil), "dchain.whiteboard.WhiteboardPixel")
}

func init() {
	proto.RegisterFile("dchain/whiteboard/whiteboard_pixel.proto", fileDescriptor_7613600cfede3dc2)
}

var fileDescriptor_7613600cfede3dc2 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x48, 0x49, 0xce, 0x48,
	0xcc, 0xcc, 0xd3, 0x2f, 0xcf, 0xc8, 0x2c, 0x49, 0x4d, 0xca, 0x4f, 0x2c, 0x4a, 0x41, 0x62, 0xc6,
	0x17, 0x64, 0x56, 0xa4, 0xe6, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x09, 0x42, 0x54, 0xea,
	0x21, 0xa4, 0x95, 0x56, 0x32, 0x72, 0xf1, 0x87, 0xc3, 0xb9, 0x01, 0x20, 0xc5, 0x42, 0x7c, 0x5c,
	0x4c, 0x99, 0x29, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x4c, 0x99, 0x29, 0x42, 0x4a, 0x5c,
	0x3c, 0x08, 0x1d, 0x9e, 0x29, 0x12, 0x4c, 0x60, 0x19, 0x14, 0x31, 0x21, 0x11, 0x2e, 0xd6, 0xcc,
	0xbc, 0x94, 0xd4, 0x0a, 0x09, 0x66, 0xb0, 0x24, 0x84, 0x03, 0xd2, 0x99, 0x93, 0x58, 0x5c, 0xe2,
	0x9b, 0x9f, 0x92, 0x99, 0x96, 0x99, 0x5a, 0x24, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x19, 0x84, 0x22,
	0x26, 0xc4, 0xc3, 0xc5, 0x58, 0x24, 0xc1, 0x0a, 0xd6, 0xc5, 0x08, 0xe6, 0xa5, 0x4b, 0xb0, 0x41,
	0x78, 0xe9, 0x20, 0x5e, 0x92, 0x04, 0x3b, 0x84, 0x97, 0xe4, 0x64, 0x7c, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x92, 0xd0, 0x20, 0xa8, 0x40, 0x0e, 0x84, 0x92, 0xca, 0x82,
	0xd4, 0xe2, 0x24, 0x36, 0xb0, 0xd7, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0xb1, 0x24,
	0xaf, 0x26, 0x01, 0x00, 0x00,
}

func (m *WhiteboardPixel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhiteboardPixel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhiteboardPixel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.B != 0 {
		i = encodeVarintWhiteboardPixel(dAtA, i, uint64(m.B))
		i--
		dAtA[i] = 0x38
	}
	if m.G != 0 {
		i = encodeVarintWhiteboardPixel(dAtA, i, uint64(m.G))
		i--
		dAtA[i] = 0x30
	}
	if m.R != 0 {
		i = encodeVarintWhiteboardPixel(dAtA, i, uint64(m.R))
		i--
		dAtA[i] = 0x28
	}
	if len(m.LastModifier) > 0 {
		i -= len(m.LastModifier)
		copy(dAtA[i:], m.LastModifier)
		i = encodeVarintWhiteboardPixel(dAtA, i, uint64(len(m.LastModifier)))
		i--
		dAtA[i] = 0x22
	}
	if m.Index != 0 {
		i = encodeVarintWhiteboardPixel(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.WhiteboardId != 0 {
		i = encodeVarintWhiteboardPixel(dAtA, i, uint64(m.WhiteboardId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWhiteboardPixel(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhiteboardPixel(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhiteboardPixel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhiteboardPixel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWhiteboardPixel(uint64(m.Id))
	}
	if m.WhiteboardId != 0 {
		n += 1 + sovWhiteboardPixel(uint64(m.WhiteboardId))
	}
	if m.Index != 0 {
		n += 1 + sovWhiteboardPixel(uint64(m.Index))
	}
	l = len(m.LastModifier)
	if l > 0 {
		n += 1 + l + sovWhiteboardPixel(uint64(l))
	}
	if m.R != 0 {
		n += 1 + sovWhiteboardPixel(uint64(m.R))
	}
	if m.G != 0 {
		n += 1 + sovWhiteboardPixel(uint64(m.G))
	}
	if m.B != 0 {
		n += 1 + sovWhiteboardPixel(uint64(m.B))
	}
	return n
}

func sovWhiteboardPixel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhiteboardPixel(x uint64) (n int) {
	return sovWhiteboardPixel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhiteboardPixel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhiteboardPixel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhiteboardPixel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhiteboardPixel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardId", wireType)
			}
			m.WhiteboardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteboardId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhiteboardPixel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhiteboardPixel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastModifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.R |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
			m.G = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.G |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			m.B = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.B |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWhiteboardPixel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhiteboardPixel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhiteboardPixel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhiteboardPixel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhiteboardPixel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhiteboardPixel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhiteboardPixel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhiteboardPixel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhiteboardPixel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhiteboardPixel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhiteboardPixel = fmt.Errorf("proto: unexpected end of group")
)
